generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id
  name                 String
  email                String
  bio                  String?
  emailVerified        Boolean
  image                String?
  receivedNotification Notification[] @relation("receipent")
  issuednotification   Notification[] @relation("issuer")
  createdAt            DateTime
  updatedAt            DateTime
  sessions             Session[]
  accounts             Account[]
  messages             Message[]
  likes                Like[]
  spaces               SpaceUser[]
  createdSpaces        Space[]        @relation("creator")
  sentFriendRequests   FriendRequest[] @relation("sent")
  receivedFriendRequests FriendRequest[] @relation("received")
  friends              Friend[]       @relation("user1Relation")
  friendships          Friend[]       @relation("user2Relation")
  conversations        ConversationUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Notification {
  id          String           @id @default(cuid())
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime
  updatedAt   DateTime         @default(now())
  receipentid String
  receipient  User             @relation("receipent", fields: [receipentid], references: [id], onDelete: Cascade)
  issuerid    String
  issuer      User             @relation("issuer", fields: [issuerid], references: [id], onDelete: Cascade)

  @@map("notification")
}

enum NotificationType {
  LIKE
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Like {
  userId  String
  spaceId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  space   Space  @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
  @@map("likes")
}

model FriendRequest {
  id         String  @id @default(cuid())
  senderId   String
  receiverId String
  sender     User    @relation(name: "sent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   User    @relation(name: "received", fields: [receiverId], references: [id], onDelete: Cascade)
  status     Status  @default(PENDING)

  @@unique([senderId, receiverId])
  @@map("friend_requests")
}

model Friend {
  id        String @id @default(cuid())
  user1Id   String
  user2Id   String
  user1     User   @relation("user1Relation", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User   @relation("user2Relation", fields: [user2Id], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([user1Id, user2Id])
  @@map("friends")
}

enum Status {
  PENDING
  ACCEPTED
}

model Conversation {
  id        String   @id @default(cuid())
  users     ConversationUser[]
  messages  Message[]
  isGroup   Boolean?
  name      String?
  createdAt DateTime @default(now())
}

model ConversationUser {
  id             String        @id @default(cuid())
  userId         String
  conversationId String
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation  Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([userId, conversationId])
}

model Space {
  id           String      @id @default(cuid())
  title        String
  description  String
  banner       String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now())
  creatorId    String
  creator      User        @relation("creator", fields: [creatorId], references: [id], onDelete: Cascade)
  users        SpaceUser[]
  likes        Like[]
  messages     Message[]


  @@map("space")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  userId    String
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  media         Media[]

  @@map("message")
}

model SpaceUser {
  id       String   @id @default(cuid())
  userId   String
  spaceId  String
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  space    Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)

  @@unique([userId, spaceId])
  @@map("space_user")
}

model Media {
  id          String    @id @default(cuid())
  Mediatype   MediaType
  url         String
  spaceId     String
  filename    String    @unique
  originalurl String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  message_id String 
  message     Message  @relation(fields: [message_id], references: [id], onDelete: Cascade)

  @@unique([spaceId, Mediatype, url])
  @@map("media")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum Role {
  ADMIN
  MEMBER
}

//this is only demo schema remember